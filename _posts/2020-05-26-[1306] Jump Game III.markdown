---
layout: post
title: [1306] Jump Game III
data: 2020-05-26
desciption: txt to markdown
thumbnail: person1.jpeg
categories: Algorithm

# Information for the author block
author : Loui
---

	﻿[95. [1306] Jump Game III – determine whether we can reach the index I with value 0 from start position with given rules.]
	- I used map to record which index I have to visit so as to visit current value. That is, map’s key is we want to visit, and map’s value is an index we need to visit the index.
	- refer to the picture below.
	 
	> the red rectangular is start position and key 3 is where 0 is.
	- I implemented DFS by using stack so that when we have path to 0, find the answer as soon as possible.
	- see the code.
	class Solution {
	public:
	    bool canReach(vector<int>& arr, int start) {
	        if(arr[start]==0) return true;
	        unordered_map<int,vector<int>> table;
	        vector<int> zeros;
	        for(int i=0;i<arr.size();i++){
	            if(arr[i]==0) zeros.push_back(i);
	            if(i+arr[i]<arr.size() && arr[i]) table[i+arr[i]].push_back(i);
	            if(i-arr[i]>=0 && arr[i]) table[i-arr[i]].push_back(i);
	        }
	        stack<int> index;
	        for(int i=0;i<zeros.size();i++){
	            int cur;
	            index.push(zeros[i]);    
	            while(!index.empty()){
	                cur=index.top();
	                index.pop();
	                if(table.find(cur)==table.end()) continue;  
	                for(int j=0;j<table[cur].size();j++){
	                    if(table[cur][j]==start) return true;
	                    index.push(table[cur][j]);
	                }
	                table[cur].clear();
	            }
	        }
	        return false;
	    }
	};
	
